unit fconfig;{  Configuration form of AWGG  Copyright (C) 2020 Reinier Romero Mir  nenirey@gmail.com  This library is free software; you can redistribute it and/or modify it  under the terms of the GNU Library General Public License as published by  the Free Software Foundation; either version 2 of the License.  This program is distributed in the hope that it will be useful, but WITHOUT  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Library General Public License  for more details.  You should have received a copy of the GNU Library General Public License  along with this library; if not, write to the Free Software Foundation,  Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.}{$mode objfpc}{$H+}interfaceuses  Classes, SysUtils, DateTimePicker, Forms, Dialogs,  ComCtrls, StdCtrls, Spin, EditBtn, ExtCtrls, Buttons, LCLIntf, fstrings,  fadd, fconfirm, Clipbrd, LazFileUtils;type  { Tfrconfig }  Tfrconfig = class(TForm)    btnFirefoxIntegration: TBitBtn;    btnOperaIntegration: TBitBtn;    btnChromeIntegration: TBitBtn;    btnAddDomain: TSpeedButton;    btnConfigAccept: TButton;    btnConfigCancel: TButton;    btnConfigApply: TButton;    btnDeleteDomain: TSpeedButton;    btnEditDomain: TSpeedButton;    btnPlayInternet: TSpeedButton;    btnPlayNoInternet: TSpeedButton;    btnPreviewNotification: TButton;    btnUpdateCheckNow: TButton;    chAutoCheckUpdate: TCheckBox;    chSilentDropMode: TCheckBox;    chUpdateCurl: TCheckBox;    chUpdateYoutubedl: TCheckBox;    chUpdateAxel: TCheckBox;    chUpdateAria2: TCheckBox;    chUpdateWget: TCheckBox;    chInternetCheck: TCheckBox;    chNotifiOnDownloadError: TCheckBox;    chNotifiOnInternet: TCheckBox;    chNotifiOnNoInternet: TCheckBox;    chNotifiOnDownloadComplete: TCheckBox;    chSysNotifications: TCheckBox;    chIgnoreFilter: TCheckBox;    chytUseExternalDown: TCheckBox;    chgYoutubedlDefArguments: TCheckGroup;    chSaveDownLogs: TCheckBox;    chStopQueue: TCheckBox;    chEnableScheduler: TCheckBox;    chLoadLogs: TCheckBox;    chShutdown: TCheckBox;    chDownUseAgent: TCheckBox;    chAria2UseMultiConnections: TCheckBox;    chUseAuth: TCheckBox;    chDaily: TCheckBox;    chShowNotifications: TCheckBox;    chSameProxy: TCheckBox;    chClipboardMonitor: TCheckBox;    chPlaySounds: TCheckBox;    chDisableLimits: TCheckBox;    chQueueRotate: TCheckBox;    chgWgetDefArguments: TCheckGroup;    chgAria2DefArguments: TCheckGroup;    chgCurlDefArguments: TCheckGroup;    chgAutomation: TCheckGroup;    chgWeekDays: TCheckGroup;    chgAxelDefArguments: TCheckGroup;    cbProxy: TComboBox;    cbDefLanguage: TComboBox;    cbDefEngine: TComboBox;    cbQueue: TComboBox;    cbytexternaldown: TComboBox;    deStartQueue: TDateEdit;    deStopQueue: TDateEdit;    dtpStartQueue: TDateTimePicker;    dtpStopQueue: TDateTimePicker;    deDownFolder: TDirectoryEdit;    deLogsPath: TDirectoryEdit;    deCategoryDownFolder: TDirectoryEdit;    edtInternetURL: TEdit;    edtProgramArguments: TEdit;    edtProgramPath: TEdit;    edtYoutubedlAdditionalArgs: TEdit;    edtHTTPhost: TEdit;    edtAxelAdditionalArgs: TEdit;    edtDownAgent: TEdit;    edtAria2SplitSize: TEdit;    edtSSLhost: TEdit;    edtFTPhost: TEdit;    edtNoProxyHosts: TEdit;    edtProxyUser: TEdit;    edtProxyPass: TEdit;    edtWgetAdditionalArgs: TEdit;    edtAria2AdditionalArgs: TEdit;    edtCurlAdditionalArgs: TEdit;    fneSoundInternet: TFileNameEdit;    fneSoundNoInternet: TFileNameEdit;    fneYoutubedlPath: TFileNameEdit;    fneWgetpath: TFileNameEdit;    fneAria2Path: TFileNameEdit;    fneCurlPath: TFileNameEdit;    fneAxelPath: TFileNameEdit;    fneSoundComplete: TFileNameEdit;    fneSoundStopped: TFileNameEdit;    gbLogsLoadMode: TGroupBox;    gbDownConnection: TGroupBox;    gbEngine: TGroupBox;    gbSounds: TGroupBox;    gbQueueRotateMode: TGroupBox;    gbAria2MultiConnections: TGroupBox;    gbUserAgent: TGroupBox;    gbytoptions: TGroupBox;    gbShowNotificationFor: TGroupBox;    lblInternetInterval: TLabel;    lblInternetURL: TLabel;    lblProgramArguments: TLabel;    lblProgramPath: TLabel;    chSoundDownComplete: TCheckBox;    chSoundDownError: TCheckBox;    chSoundInternet: TCheckBox;    chSoundNoInternet: TCheckBox;    lblUpdateInfo: TLabel;    lblYoutubedlAdditionalArgs: TLabel;    lblYoutubedlPath: TLabel;    lblHTTPhost: TLabel;    lblStartQueue: TLabel;    lblQueue: TLabel;    lblHideIn: TLabel;    lblSeconds: TLabel;    lblDownFolder: TLabel;    lblWgetPath: TLabel;    lblAria2Path: TLabel;    lblCurlPath: TLabel;    lblWgetAdditionalArgs: TLabel;    lblAria2AdditionalArgs: TLabel;    lblSSLhost: TLabel;    lblDefEngine: TLabel;    lblCurlAdditionalArgs: TLabel;    lblLogsPath: TLabel;    lblAxelPath: TLabel;    lblAxelAdditionalArgs: TLabel;    lblNoProxyHelp: TLabel;    lblCategoryDownFolder: TLabel;    lblCategory: TLabel;    lblFTPhost: TLabel;    lblExtensions: TLabel;    lblAria2Connections: TLabel;    lblDownTimeOut: TLabel;    lblDownTries: TLabel;    lblDownDelayTries: TLabel;    lblHTTPport: TLabel;    lblDefLanguage: TLabel;    lblQueueTriesRotate: TLabel;    lblQueueDelaySec: TLabel;    lblAria2SplitSize: TLabel;    lblSSLport: TLabel;    lblFTPport: TLabel;    lblNoProxyHosts: TLabel;    lblProxyUser: TLabel;    lblProxyPass: TLabel;    lbCategory: TListBox;    lbExtensions: TListBox;    lbDomains: TListBox;    browseropendlg: TOpenDialog;    pcConfig: TPageControl;    pConfigInfo: TPanel;    pbUpdate: TProgressBar;    //RadioButton1: TRadioButton;    rbQueueRMToEnd: TRadioButton;    rbQueueRMTwoStop: TRadioButton;    rbLogsLoadAll: TRadioButton;    rbLogsLoadLines: TRadioButton;    rbCategoryOneFolder: TRadioButton;    rbCategoryByType: TRadioButton;    rbQueueRMOneStep: TRadioButton;    rgPosition: TRadioGroup;    rgCategorize: TRadioGroup;    btnPlayComplete: TSpeedButton;    btnPlayStopped: TSpeedButton;    btnAddQueue: TSpeedButton;    btnAddCategory: TSpeedButton;    btnDeleteCategory: TSpeedButton;    btnAddExtension: TSpeedButton;    btnDeleteExtension: TSpeedButton;    btnEditCategory: TSpeedButton;    seHTTPport: TSpinEdit;    seDownTimeOut: TSpinEdit;    seDownTries: TSpinEdit;    seDownDelayTries: TSpinEdit;    seInternetInterval: TSpinEdit;    seQueueTriesRotate: TSpinEdit;    seQueueDelaySec: TSpinEdit;    seSSLport: TSpinEdit;    seFTPport: TSpinEdit;    seHideSeconds: TSpinEdit;    seAria2Connections: TSpinEdit;    sbtnCopyPath: TSpeedButton;    sbtnCopyArguments: TSpeedButton;    tsDropBox: TTabSheet;    tsUpdates: TTabSheet;    tsInternetMonitor: TTabSheet;    tsYoutubedl: TTabSheet;    tsProxy: TTabSheet;    tsLogs: TTabSheet;    tsAxel: TTabSheet;    tsIntegration: TTabSheet;    tsDownOptions: TTabSheet;    tsLang: TTabSheet;    tsSounds: TTabSheet;    tsQueue: TTabSheet;    tsScheduler: TTabSheet;    tsNotifications: TTabSheet;    tsClipboardm: TTabSheet;    tsFolders: TTabSheet;    tsWget: TTabSheet;    tsAria2: TTabSheet;    tsCurl: TTabSheet;    tsAutomation: TTabSheet;    tvConfig: TTreeView;    procedure btnAddDomainClick(Sender: TObject);    procedure btnChromeIntegrationClick(Sender: TObject);    procedure btnConfigAcceptClick(Sender: TObject);    procedure btnConfigCancelClick(Sender: TObject);    procedure btnConfigApplyClick(Sender: TObject);    procedure btnDeleteDomainClick(Sender: TObject);    procedure btnEditDomainClick(Sender: TObject);    procedure btnFirefoxIntegrationClick(Sender: TObject);    procedure btnOperaIntegrationClick(Sender: TObject);    procedure btnPlayInternetClick(Sender: TObject);    procedure btnPlayNoInternetClick(Sender: TObject);    procedure btnPreviewNotificationClick(Sender: TObject);    procedure btnUpdateCheckNowClick(Sender: TObject);    procedure chIgnoreFilterChange(Sender: TObject);    procedure chShowNotificationsChange(Sender: TObject);    procedure chStopQueueChange(Sender: TObject);    procedure chEnableSchedulerChange(Sender: TObject);    procedure chLoadLogsChange(Sender: TObject);    procedure chSysNotificationsChange(Sender: TObject);    procedure chUseAuthChange(Sender: TObject);    procedure chDailyChange(Sender: TObject);    procedure chSameProxyChange(Sender: TObject);    procedure chQueueRotateChange(Sender: TObject);    procedure cbProxyChange(Sender: TObject);    procedure cbQueueChange(Sender: TObject);    procedure chytUseExternalDownChange(Sender: TObject);    procedure deDownFolderAcceptDirectory(Sender: TObject; var Value: String);    procedure FormShow(Sender: TObject);    procedure lbCategorySelectionChange(Sender: TObject; User: boolean);    procedure pcConfigChange(Sender: TObject);    procedure btnPlayCompleteClick(Sender: TObject);    procedure btnPlayStoppedClick(Sender: TObject);    procedure btnAddQueueClick(Sender: TObject);    procedure btnAddCategoryClick(Sender: TObject);    procedure btnDeleteCategoryClick(Sender: TObject);    procedure btnAddExtensionClick(Sender: TObject);    procedure btnDeleteExtensionClick(Sender: TObject);    procedure btnEditCategoryClick(Sender: TObject);    procedure sbtnCopyArgumentsClick(Sender: TObject);    procedure sbtnCopyPathClick(Sender: TObject);    procedure tsIntegrationShow(Sender: TObject);    procedure tvConfigSelectionChanged(Sender: TObject);  private    { private declarations }  public    { public declarations }  end;var  frconfig: Tfrconfig;  //setconfig:boolean;  categoryextencionstmp:array of TStringList;implementationUses fmain;{$R *.lfm}{ Tfrconfig }procedure categoryreload();var  i:integer;begin  frconfig.lbCategory.Items.Clear;  for i:=0 to Length(categoryextencionstmp)-1 do  begin    try      frconfig.lbCategory.Items.Add(categoryextencionstmp[i][1]);    except on e:exception do      //ShowMessage(e.ToString);    end;  end;end;procedure extencionreload();begin  frconfig.lbCategorySelectionChange(nil,false);end;procedure categorydelete(indice:integer);var  templistarray:array of TStringlist;  i:integer;begin  SetLength(templistarray,Length(categoryextencionstmp)-1);  for i:=0 to Length(categoryextencionstmp)-1 do  begin    if i<>indice then    begin      if i<indice then      begin        templistarray[i]:=TStringList.Create;        templistarray[i]:=categoryextencionstmp[i];      end      else      begin        templistarray[i-1]:=TStringList.Create;        templistarray[i-1]:=categoryextencionstmp[i];      end;    end;  end;  categoryextencionstmp:=templistarray;  categoryreload();end;procedure Tfrconfig.btnConfigCancelClick(Sender: TObject);begin  categoryextencionstmp:=categoryextencions;  frconfig.Close;end;procedure Tfrconfig.btnConfigApplyClick(Sender: TObject);var  validate:boolean;  n:integer;begin  validate:=false;  if frconfig.chDaily.Checked and frconfig.chEnableScheduler.Checked then  begin    for n:=0 to frconfig.chgWeekDays.Items.Count-1 do    begin      if frconfig.chgWeekDays.Checked[n] then        validate:=true;    end;  end  else    validate:=true;  if validate then  begin    fmain.setconfig();  end  else  begin    ShowMessage(fstrings.msgmustselectweekday);    frconfig.tsScheduler.Show;  end;end;procedure Tfrconfig.btnDeleteDomainClick(Sender: TObject);begin  frconfig.lbDomains.DeleteSelected;end;procedure Tfrconfig.btnEditDomainClick(Sender: TObject);begin  fradd.edtValue.Text:=frconfig.lbDomains.Items.Strings[frconfig.lbDomains.ItemIndex];  fradd.ShowModal;  if ok and (fradd.edtValue.Text<>'') then  begin    frconfig.lbDomains.Items.Strings[frconfig.lbDomains.ItemIndex]:=fradd.edtValue.Text;  end;end;procedure Tfrconfig.btnChromeIntegrationClick(Sender: TObject);var  chromepath:string;begin  {$IFDEF LINUX}    if FileExists('/usr/bin/chrome') then      chromepath:='/usr/bin/chrome';  {$ENDIF}  {$IFDEF MSWINDOWS}    if FileExistsUTF8('C:\Program Files (x86)\Google\Chrome\Application\chrome.exe') then      chromepath:='C:\Program Files (x86)\Google\Chrome\Application\chrome.exe';    if FileExistsUTF8('C:\Program Files\Google\Chrome\Application\chrome.exe') then      chromepath:='C:\Program Files\Google\Chrome\Application\chrome.exe';  {$ENDIF}  if FileExists(chromepath) then    runprocess(chromepath,['https://chrome.google.com/webstore/detail/download-with-wget/jplcfomghgpjlgglocndioeceojhoika'])  else  begin    frconfig.browseropendlg.Title:=fstrings.msgchromeexecutable;    frconfig.browseropendlg.Execute;    if {$IFDEF LCLQT}(frconfig.browseropendlg.UserChoice=1){$else}{$IFDEF LCLQT5}(frconfig.browseropendlg.UserChoice=1){$ELSE}frconfig.browseropendlg.FileName<>''{$endif}{$ENDIF} then      runprocess(frconfig.browseropendlg.FileName,['https://chrome.google.com/webstore/detail/download-with-wget/jplcfomghgpjlgglocndioeceojhoika']);  end;end;procedure Tfrconfig.btnFirefoxIntegrationClick(Sender: TObject);var  firefoxpath:string;begin  {$IFDEF LINUX}    if FileExists('/usr/bin/firefox') then      firefoxpath:='/usr/bin/firefox';  {$ENDIF}  {$IFDEF MSWINDOWS}  if FileExistsUTF8('C:\Program Files (x86)\Mozilla Firefox\firefox.exe') then    firefoxpath:='C:\Program Files (x86)\Mozilla Firefox\firefox.exe';  if FileExistsUTF8('C:\Program Files\Mozilla Firefox\firefox.exe') then    firefoxpath:='C:\Program Files\Mozilla Firefox\firefox.exe';  {$ENDIF}  if FileExists(firefoxpath) then    runprocess(firefoxpath,['https://addons.mozilla.org/firefox/addon/download-with-gnu-wget/'])  else  begin    frconfig.browseropendlg.Title:=fstrings.msgfirefoxexecutable;    frconfig.browseropendlg.Execute;    if {$IFDEF LCLQT}(frconfig.browseropendlg.UserChoice=1){$else}{$IFDEF LCLQT5}(frconfig.browseropendlg.UserChoice=1){$ELSE}frconfig.browseropendlg.FileName<>''{$endif}{$ENDIF} then      runprocess(frconfig.browseropendlg.FileName,['https://addons.mozilla.org/firefox/addon/download-with-gnu-wget/']);  end;end;procedure Tfrconfig.btnOperaIntegrationClick(Sender: TObject);var  operapath:string;begin  {$IFDEF LINUX}    if FileExists('/usr/bin/opera') then      operapath:='/usr/bin/opera';  {$ENDIF}  {$IFDEF MSWINDOWS}    if FileExists('C:\Program Files (x86)\Opera\launcher.exe') then      operapath:='C:\Program Files (x86)\Opera\launcher.exe';    if FileExists('C:\Program Files\Opera\launcher.exe') then      operapath:='C:\Program Files\Opera\launcher.exe';  {$ENDIF}  if FileExists(operapath) then    runprocess(operapath,['https://addons.opera.com/extensions/details/download-with-wget/'])  else  begin    frconfig.browseropendlg.Title:=fstrings.msgoperaexecutable;    frconfig.browseropendlg.Execute;    if {$IFDEF LCLQT}(frconfig.browseropendlg.UserChoice=1){$else}{$IFDEF LCLQT5}(frconfig.browseropendlg.UserChoice=1){$ELSE}frconfig.browseropendlg.FileName<>''{$endif}{$ENDIF} then      runprocess(frconfig.browseropendlg.FileName,['https://addons.opera.com/extensions/details/download-with-wget/']);  end;end;procedure Tfrconfig.btnPlayInternetClick(Sender: TObject);begin  playsound(StringReplace(frconfig.fneSoundInternet.Text,awgg_path,currentdir,[rfReplaceAll]));end;procedure Tfrconfig.btnPlayNoInternetClick(Sender: TObject);begin  playsound(StringReplace(frconfig.fneSoundNoInternet.Text,awgg_path,currentdir,[rfReplaceAll]));end;procedure Tfrconfig.btnPreviewNotificationClick(Sender: TObject);var  booltmp:boolean;begin  booltmp:=usesysnotifi;  usesysnotifi:=frconfig.chSysNotifications.Checked;  try    createnewnotifi('AWGG',Application.Params[0],TimeToStr(Now()),'',usesysnotifi,'',frconfig.rgPosition.ItemIndex);  finally    usesysnotifi:=booltmp;  end;end;procedure Tfrconfig.btnUpdateCheckNowClick(Sender: TObject);begin  checkforupdates;end;procedure Tfrconfig.chIgnoreFilterChange(Sender: TObject);begin  frconfig.lbDomains.Enabled:=frconfig.chIgnoreFilter.Checked;  frconfig.btnAddDomain.Enabled:=frconfig.chIgnoreFilter.Checked;  frconfig.btnDeleteDomain.Enabled:=frconfig.chIgnoreFilter.Checked;  frconfig.btnEditDomain.Enabled:=frconfig.chIgnoreFilter.Checked;end;procedure Tfrconfig.chShowNotificationsChange(Sender: TObject);begin  frconfig.chSysNotifications.Enabled:=frconfig.chShowNotifications.Checked;  frconfig.lblHideIn.Enabled:=frconfig.chShowNotifications.Checked;  frconfig.seHideSeconds.Enabled:=frconfig.chShowNotifications.Checked;  frconfig.lblSeconds.Enabled:=frconfig.chShowNotifications.Checked;  frconfig.btnPreviewNotification.Enabled:=frconfig.chShowNotifications.Checked;  if frconfig.chSysNotifications.Checked then    frconfig.rgPosition.Enabled:=false  else    frconfig.rgPosition.Enabled:=frconfig.chShowNotifications.Checked;  frconfig.gbShowNotificationFor.Enabled:=frconfig.chShowNotifications.Checked;end;procedure Tfrconfig.chStopQueueChange(Sender: TObject);begin  frconfig.dtpStopQueue.Enabled:=frconfig.chStopQueue.Checked;  frconfig.deStopQueue.Enabled:=(not frconfig.chDaily.Checked) and frconfig.chStopQueue.Checked;end;procedure Tfrconfig.chEnableSchedulerChange(Sender: TObject);begin  frconfig.chDaily.Enabled:=frconfig.chEnableScheduler.Checked;  frconfig.chDisableLimits.Enabled:=frconfig.chEnableScheduler.Checked;  frconfig.lblStartQueue.Enabled:=frconfig.chEnableScheduler.Checked;  frconfig.chStopQueue.Enabled:=frconfig.chEnableScheduler.Checked;  frconfig.deStartQueue.Enabled:=frconfig.chEnableScheduler.Checked;  frconfig.deStopQueue.Enabled:=frconfig.chEnableScheduler.Checked;  frconfig.dtpStartQueue.Enabled:=frconfig.chEnableScheduler.Checked;  frconfig.dtpStopQueue.Enabled:=frconfig.chEnableScheduler.Checked;  if frconfig.chEnableScheduler.Checked then  begin    frconfig.chDailyChange(nil);    frconfig.chStopQueueChange(nil);  end;end;procedure Tfrconfig.chLoadLogsChange(Sender: TObject);begin  frconfig.gbLogsLoadMode.Enabled:=frconfig.chLoadLogs.Checked;end;procedure Tfrconfig.chSysNotificationsChange(Sender: TObject);begin  frconfig.rgPosition.Enabled:=not frconfig.chSysNotifications.Checked;end;procedure Tfrconfig.chUseAuthChange(Sender: TObject);begin  if frconfig.cbProxy.ItemIndex=2 then  begin    frconfig.lblProxyUser.Enabled:=frconfig.chUseAuth.Checked;    frconfig.lblProxyPass.Enabled:=frconfig.chUseAuth.Checked;    frconfig.edtProxyUser.Enabled:=frconfig.chUseAuth.Checked;    frconfig.edtProxyPass.Enabled:=frconfig.chUseAuth.Checked;  end;end;procedure Tfrconfig.chDailyChange(Sender: TObject);begin  if chDaily.Checked then  begin    frconfig.deStartQueue.Enabled:=false;    frconfig.deStopQueue.Enabled:=false;    chgWeekDays.Enabled:=true;  end  else  begin    frconfig.deStartQueue.Enabled:=true;    frconfig.deStopQueue.Enabled:=frconfig.chStopQueue.Checked;    chgWeekDays.Enabled:=false;  end;end;procedure Tfrconfig.chSameProxyChange(Sender: TObject);begin  if frconfig.cbProxy.ItemIndex = 2 then  begin    if chSameProxy.Checked then    begin      edtSSLhost.Text:=edtHTTPhost.Text;      edtFTPhost.Text:=edtHTTPhost.Text;      seSSLport.Value:=seHTTPport.Value;      seFTPport.Value:=seHTTPport.Value;      edtSSLhost.Enabled:=false;      edtFTPhost.Enabled:=false;      seSSLport.Enabled:=false;      seFTPport.Enabled:=false;   end   else   begin     edtSSLhost.Enabled:=true;     edtFTPhost.Enabled:=true;     seSSLport.Enabled:=true;     seFTPport.Enabled:=true;   end;  end;end;procedure Tfrconfig.chQueueRotateChange(Sender: TObject);begin  frconfig.gbQueueRotateMode.Enabled:=frconfig.chQueueRotate.Checked;end;procedure Tfrconfig.cbProxyChange(Sender: TObject);begin  Case frconfig.cbProxy.ItemIndex of    0,1:    begin      frconfig.edtHTTPhost.Enabled:=false;      frconfig.edtSSLhost.Enabled:=false;      frconfig.edtFTPhost.Enabled:=false;      frconfig.edtNoProxyHosts.Enabled:=false;      frconfig.edtProxyUser.Enabled:=false;      frconfig.edtProxyPass.Enabled:=false;      frconfig.lblHTTPhost.Enabled:=false;      frconfig.lblSSLhost.Enabled:=false;      frconfig.lblFTPhost.Enabled:=false;      frconfig.lblHTTPport.Enabled:=false;      frconfig.lblSSLport.Enabled:=false;      frconfig.lblFTPport.Enabled:=false;      frconfig.lblNoProxyHosts.Enabled:=false;      frconfig.lblProxyUser.Enabled:=false;      frconfig.lblProxyPass.Enabled:=false;      frconfig.lblNoProxyHelp.Enabled:=false;      frconfig.seHTTPport.Enabled:=false;      frconfig.seSSLport.Enabled:=false;      frconfig.seFTPport.Enabled:=false;      frconfig.chSameProxy.Enabled:=false;      frconfig.chUseAuth.Enabled:=false;    end;    2:    begin      frconfig.edtHTTPhost.Enabled:=true;      frconfig.edtSSLhost.Enabled:=true;      frconfig.edtFTPhost.Enabled:=true;      frconfig.edtNoProxyHosts.Enabled:=true;      frconfig.edtProxyUser.Enabled:=true;      frconfig.edtProxyPass.Enabled:=true;      frconfig.lblHTTPhost.Enabled:=true;      frconfig.lblSSLhost.Enabled:=true;      frconfig.lblFTPhost.Enabled:=true;      frconfig.lblHTTPport.Enabled:=true;      frconfig.lblSSLport.Enabled:=true;      frconfig.lblFTPport.Enabled:=true;      frconfig.lblNoProxyHosts.Enabled:=true;      frconfig.lblProxyUser.Enabled:=true;      frconfig.lblProxyPass.Enabled:=true;      frconfig.lblNoProxyHelp.Enabled:=true;      frconfig.seHTTPport.Enabled:=true;      frconfig.seSSLport.Enabled:=true;      frconfig.seFTPport.Enabled:=true;      frconfig.chSameProxy.Enabled:=true;      frconfig.chUseAuth.Enabled:=true;      frconfig.chUseAuthChange(nil);      frconfig.chSameProxyChange(nil);    end;  end;end;procedure Tfrconfig.cbQueueChange(Sender: TObject);begin  frconfig.chEnableScheduler.Checked:=qtimerenable[frconfig.cbQueue.ItemIndex];  frconfig.chDaily.Checked:=qallday[frconfig.cbQueue.ItemIndex];  frconfig.dtpStartQueue.Time:=queuestarttimes[frconfig.cbQueue.ItemIndex];  frconfig.deStartQueue.Date:=queuestartdates[frconfig.cbQueue.ItemIndex];  frconfig.chStopQueue.Checked:=qstop[frconfig.cbQueue.ItemIndex];  frconfig.dtpStopQueue.Time:=queuestoptimes[frconfig.cbQueue.ItemIndex];  frconfig.deStopQueue.Date:=queuestopdates[frconfig.cbQueue.ItemIndex];  frconfig.chgWeekDays.Checked[0]:=qdomingo[frconfig.cbQueue.ItemIndex];  frconfig.chgWeekDays.Checked[1]:=qlunes[frconfig.cbQueue.ItemIndex];  frconfig.chgWeekDays.Checked[2]:=qmartes[frconfig.cbQueue.ItemIndex];  frconfig.chgWeekDays.Checked[3]:=qmiercoles[frconfig.cbQueue.ItemIndex];  frconfig.chgWeekDays.Checked[4]:=qjueves[frconfig.cbQueue.ItemIndex];  frconfig.chgWeekDays.Checked[5]:=qviernes[frconfig.cbQueue.ItemIndex];  frconfig.chgWeekDays.Checked[6]:=qsabado[frconfig.cbQueue.ItemIndex];  frconfig.chDisableLimits.Checked:=queuelimits[frconfig.cbQueue.ItemIndex];  frconfig.chShutdown.Checked:=queuepoweroff[frconfig.cbQueue.ItemIndex];  frconfig.chEnableSchedulerChange(nil);end;procedure Tfrconfig.chytUseExternalDownChange(Sender: TObject);begin  frconfig.cbytexternaldown.Enabled:=frconfig.chytUseExternalDown.Checked;end;procedure Tfrconfig.deDownFolderAcceptDirectory(Sender: TObject;  var Value: String);var  i:integer;begin  frconfirm.dlgtext.Caption:=fstrings.rootdownloadpathchange;  frconfirm.ShowModal;  if dlgcuestion then  begin   for i:=0 to Length(categoryextencionstmp)-1 do   begin    categoryextencionstmp[i][0]:=Value+pathdelim+ExtractFileName(categoryextencionstmp[i][0]);   end;  end;end;procedure Tfrconfig.FormShow(Sender: TObject);begin  frconfig.cbProxyChange(nil);  frconfig.chEnableSchedulerChange(nil);  frconfig.chUseAuthChange(nil);  frconfig.chSameProxyChange(nil);  frconfig.chQueueRotateChange(nil);  frconfig.chLoadLogsChange(nil);  categoryreload();end;procedure Tfrconfig.lbCategorySelectionChange(Sender: TObject; User: boolean);var  x:integer;begin  frconfig.lbExtensions.Items.Clear;  if frconfig.lbCategory.ItemIndex<>-1 then  begin    frconfig.deCategoryDownFolder.Text:=categoryextencionstmp[frconfig.lbCategory.ItemIndex][0];    for x:=2 to categoryextencionstmp[frconfig.lbCategory.ItemIndex].Count-1 do    begin      frconfig.lbExtensions.Items.Add(UpperCase(categoryextencionstmp[frconfig.lbCategory.ItemIndex][x]));    end;  end;end;procedure Tfrconfig.pcConfigChange(Sender: TObject);begin  frconfig.tvConfig.Items[frconfig.pcConfig.ActivePageIndex].Selected:=true;end;procedure Tfrconfig.btnPlayCompleteClick(Sender: TObject);begin  playsound(StringReplace(frconfig.fneSoundComplete.Text,awgg_path,currentdir,[rfReplaceAll]));end;procedure Tfrconfig.btnPlayStoppedClick(Sender: TObject);begin  playsound(StringReplace(frconfig.fneSoundStopped.Text,awgg_path,currentdir,[rfReplaceAll]));end;procedure Tfrconfig.btnAddQueueClick(Sender: TObject);var  i:integer;begin  newqueue();  frconfig.cbQueue.Items.Clear;  for i:=0 to Length(queues)-1 do  begin    frconfig.cbQueue.Items.Add(queuenames[i]);  end;  frconfig.cbQueue.ItemIndex:=Length(queues)-1;end;procedure Tfrconfig.btnAddCategoryClick(Sender: TObject);begin  fradd.edtValue.Text:='';  fradd.ShowModal;  if ok and (fradd.edtValue.Text<>'') then  begin    SetLength(categoryextencionstmp,Length(categoryextencionstmp)+1);    categoryextencionstmp[Length(categoryextencionstmp)-1]:=TStringList.Create;    categoryextencionstmp[Length(categoryextencionstmp)-1].add(ddowndir+pathdelim+fradd.edtValue.Text);    categoryextencionstmp[Length(categoryextencionstmp)-1].add(fradd.edtValue.Text);    categoryreload();  end;end;procedure Tfrconfig.btnDeleteCategoryClick(Sender: TObject);begin  if frconfig.lbCategory.ItemIndex <> -1 then    categorydelete(frconfig.lbCategory.ItemIndex);end;procedure Tfrconfig.btnAddExtensionClick(Sender: TObject);begin  if frconfig.lbCategory.ItemIndex<>-1 then  begin    fradd.edtValue.Text:='';    fradd.ShowModal;    if ok and (fradd.edtValue.Text<>'') then    begin      categoryextencionstmp[frconfig.lbCategory.ItemIndex].Add(fradd.edtValue.Text);      extencionreload();    end;  end;end;procedure Tfrconfig.btnDeleteExtensionClick(Sender: TObject);begin  if (frconfig.lbExtensions.ItemIndex<>-1) and (frconfig.lbCategory.ItemIndex<>-1) then  begin    categoryextencionstmp[frconfig.lbCategory.ItemIndex].Delete(frconfig.lbExtensions.ItemIndex+2);    extencionreload();  end;end;procedure Tfrconfig.btnEditCategoryClick(Sender: TObject);begin  if frconfig.lbCategory.ItemIndex<>-1 then  begin    fradd.edtValue.Text:=frconfig.lbCategory.Items[frconfig.lbCategory.ItemIndex];    fradd.ShowModal;    if ok then    begin      categoryextencionstmp[frconfig.lbCategory.ItemIndex][1]:=fradd.edtValue.Text;      categoryreload();    end;  end;end;procedure Tfrconfig.sbtnCopyArgumentsClick(Sender: TObject);begin  clipboard.AsText:=frconfig.edtProgramArguments.Text;end;procedure Tfrconfig.sbtnCopyPathClick(Sender: TObject);begin  clipboard.AsText:=frconfig.edtProgramPath.Text;end;procedure Tfrconfig.tsIntegrationShow(Sender: TObject);begin  frconfig.edtProgramPath.Text:=Application.ExeName;end;procedure Tfrconfig.tvConfigSelectionChanged(Sender: TObject);begin  pcConfig.TabIndex:=tvConfig.Selected.Index;  pConfigInfo.Caption:=tvConfig.Selected.Text;end;procedure Tfrconfig.btnConfigAcceptClick(Sender: TObject);var  validate:boolean;  n:integer;begin  validate:=false;  if frconfig.chDaily.Checked and frconfig.chEnableScheduler.Checked then  begin    for n:=0 to frconfig.chgWeekDays.Items.Count-1 do    begin      if frconfig.chgWeekDays.Checked[n] then        validate:=true;    end;  end  else    validate:=true;  if validate then  begin    fmain.setconfig();    frconfig.Close;  end  else  begin    ShowMessage(fstrings.msgmustselectweekday);    frconfig.tsScheduler.Show;  end;end;procedure Tfrconfig.btnAddDomainClick(Sender: TObject);begin  fradd.edtValue.Text:='';  fradd.ShowModal;  if ok and (fradd.edtValue.Text<>'') then  begin    frconfig.lbDomains.AddItem(fradd.edtValue.Text,nil);  end;end;end.